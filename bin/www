#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('f17-esn-sa2:server');
var http = require('http');
var UserDAO = require('../util/dao/userDAO').UserDAO;
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
global.io = io;

/**
 * List contains the sockets of different clients
 */
var clients_list = new Array();
var unread_list = new Array();
global.clients_list = clients_list;
global.unread_list = unread_list;
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(app.get('port'), function () {
  console.log("Server is listening on port " + app.get('port'));
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/*
 * Update the users to offline status
 */
function statusSetOffLine(id){
  UserDAO.updateUser({_id:id}, {isOnline: false}).then(function() {
      global.io.emit("reload user directory");
  });
}

// server listening
io.on('connection',function(socket){

    // Client Object
    var client = {
        Socket: socket,
        id: ''
    };


    socket.on("login",function(id){
        client.id = id;
        client.Socket = socket;
        clients_list.push(client);
        for(let n in unread_list){
            if(unread_list[n].id === id) {      // retrieve unread_list of newly login user
                for (let j in unread_list[n].list) {    // mark each of the ids
                    socket.emit("ReceivedPrivateMessage", unread_list[n].list[j], "");
                }
                unread_list.splice(n, 1);
                break;
            }
        }
    });


    /*
     * Users disconnect
     */
    socket.on('disconnect',function(){
        console.log("logout!");
        var id = "";
        for(var n in clients_list){
            if(clients_list[n].Socket === socket){
                id = clients_list[n].id;
                clients_list.splice(n,1);
                statusSetOffLine(id);
            }
        }

    });

});
